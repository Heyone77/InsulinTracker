import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import java.text.DecimalFormat

@Composable
fun RecountCarbsCountScreen() {
    var stal by remember { mutableStateOf("") }
    var byl by remember { mutableStateOf("") }
    var plan by remember { mutableStateOf("") }
    var pereraschetUK by remember { mutableStateOf<String?>(null) }
    var sredniyUK by remember { mutableStateOf<String?>(null) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(rememberScrollState()),
        verticalArrangement = Arrangement.Top
    ) {
        OutlinedTextField(
            value = stal,
            onValueChange = {
                if (it.all { char -> char.isDigit() || char == '.' }) {
                    stal = it
                }
            },
            label = { Text("–£–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (—Å–µ–≥–æ–¥–Ω—è)") },
            modifier = Modifier.fillMaxWidth(),
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number
            )
        )
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(
            value = byl,
            onValueChange = {
                if (it.all { char -> char.isDigit() || char == '.' }) {
                    byl = it
                }
            },
            label = { Text("–£–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–≤—á–µ—Ä–∞)") },
            modifier = Modifier.fillMaxWidth(),
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number
            )
        )
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(
            value = plan,
            onValueChange = {
                if (it.all { char -> char.isDigit() || char == '.' }) {
                    plan = it
                }
            },
            label = { Text("–£–ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏") },
            modifier = Modifier.fillMaxWidth(),
            keyboardOptions = KeyboardOptions.Default.copy(
                keyboardType = KeyboardType.Number
            )
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(
            onClick = {
                val stalValue = stal.toDoubleOrNull()
                val bylValue = byl.toDoubleOrNull()
                val planValue = plan.toDoubleOrNull()

                if (stalValue != null && bylValue != null && planValue != null) {
                    pereraschetUK = formatResult(recountUK(stalValue, bylValue, planValue))
                    sredniyUK = formatResult(calculateAverageUK(stalValue, bylValue, planValue))
                } else {
                    pereraschetUK = "Invalid input"
                    sredniyUK = "Invalid input"
                }
            },
            modifier = Modifier
                .align(Alignment.End)
                .fillMaxWidth()
        ) {
            Text("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
        }
        Spacer(modifier = Modifier.height(16.dp))
        pereraschetUK?.let {
            Text(
                text = "–ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –£–ö: $it",
                fontSize = 20.sp,
                textAlign = TextAlign.Justify
            )
        }
        Spacer(modifier = Modifier.height(8.dp))
        sredniyUK?.let {
            Text(
                text = "–°—Ä–µ–¥–Ω–∏–π –£–ö: $it",
                fontSize = 20.sp,
                textAlign = TextAlign.Justify
            )
        }
        Spacer(modifier = Modifier.height(12.dp))
        Text(
            text = "üî¥–ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –£–ö –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (–≤ —Å–ª—É—á–∞–µ –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è) –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏.\n" +
                    "‚≠ï–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–ø—ã—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. \n" +
                    "‚≠ï–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ (\"I\" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞).",
            fontSize = 16.sp, textAlign = TextAlign.Justify
        )
    }
}

fun recountUK(stal: Double, byl: Double, plan: Double): Double {
    return stal / byl * plan
}

fun calculateAverageUK(stal: Double, byl: Double, plan: Double): Double {
    val pereraschet = recountUK(stal, byl, plan)
    return (pereraschet + plan) / 2
}

fun formatResult(value: Double): String {
    val decimalFormat = DecimalFormat("#.##")
    return decimalFormat.format(value)
}
